-- ************************** SqlDBM: Snowflake *************************
-- **** Generated by SqlDBM: superstore by sidorovwolfivan@gmail.com ****


-- ************************************** calendar
drop table if exists calendar;
CREATE TABLE calendar
(
 Date_id  serial NOT NULL,
 year     int NOT NULL,
 quarter  int NOT NULL,
 month    int NOT NULL,
 week     int NOT NULL,
 date     date NOT NULL,
 week_day varchar(20) NOT NULL,
 leap     varchar(20) NOT NULL,

 CONSTRAINT PK_calendar PRIMARY KEY ( Date_id )
);

truncate table dw.calendar;
--
insert into dw.calendar 
select 
to_char(date,'yyyymmdd')::int as date_id,  
       extract('year' from date)::int as year,
       extract('quarter' from date)::int as quarter,
       extract('month' from date)::int as month,
       extract('week' from date)::int as week,
       date::date,
       to_char(date, 'dy') as week_day,
       extract('day' from
               (date + interval '2 month - 1 day')
              ) = 29
       as leap
  from generate_series(date '2000-01-01',
                       date '2030-01-01',
                       interval '1 day')
       as t(date);

-- ************************************** client
drop table if exists client CASCADE;

CREATE TABLE client
(
 Cust_ID         serial NOT NULL,
 Customer_ID     varchar(8) NOT NULL,
 Customer_Name varchar(22) NOT NULL,

 CONSTRAINT PK_client PRIMARY KEY ( Cust_ID )
);

INSERT INTO dw.client (customer_id, customer_name)
SELECT DISTINCT customer_id, customer_name
FROM stg.orders;




-- ************************************** geo
drop table if exists geo CASCADE;

CREATE TABLE geo
(
 geo_ID        serial NOT NULL,
 Country       varchar(13) NOT NULL,
 City          varchar(17) NOT NULL,
 State         varchar(20) NOT NULL,
 Region        varchar(20) NOT NULL,
 Postal_Code   int NULL,

 CONSTRAINT PK_geo PRIMARY KEY ( geo_ID )
);

insert into dw.geo(country, city, state,region, postal_code)
select country, city, state,region, postal_code from (select distinct country, city, state,region, postal_code from stg.orders ) a;

--data quality check
select distinct country, city, state, postal_code from dw.geo
where country is null or city is null or postal_code is null;

-- City Burlington, Vermont doesn't have postal code
update dw.geo
set postal_code = '05401'
where city = 'Burlington'  and postal_code is null;

--also update source file
update stg.orders
set postal_code = '05401'
where city = 'Burlington'  and postal_code is null;

select * from dw.geo
where city = 'Burlington'

-- ************************************** product
drop table if exists product CASCADE;

CREATE TABLE product
(
 Prod_ID        serial NOT NULL,
 Product_ID     varchar(50) NOT NULL,
 Product_Name varchar(127) NOT NULL,
 Category       varchar(15) NOT NULL,
 Sub_Category   varchar(11) NOT NULL,
 Segment        varchar(11) NOT NULL,

 CONSTRAINT PK_product PRIMARY KEY ( Prod_ID )
);

insert into dw.product (product_id, product_name, category, sub_category, segment)
select product_id, product_name, category, subcategory, segment from (select distinct product_id, product_name, category, subcategory, segment from stg.orders ) a;

-- ************************************** shipping_mode
drop table if exists shipping_mode;

CREATE TABLE shipping_mode
(
 ship_id   serial NOT NULL,
 ship_mode varchar(14) NOT NULL,

 CONSTRAINT PK_shipping_mode PRIMARY KEY ( ship_id )
);

-- Вставляем уникальные ship_mode из исходной таблицы
INSERT INTO dw.shipping_mode (ship_mode)
SELECT DISTINCT ship_mode
FROM stg.orders;


-- ************************************** sales_facts
drop table if exists sales_facts;

CREATE TABLE sales_facts
(
 Sales_Fact_ID serial NOT NULL,
 Sales         numeric(9,4) NOT NULL,
 Quantity      int4 NOT NULL,
 Discount      numeric(4,2) NOT NULL,
 Profit        numeric(21,16) NOT NULL,
 order_id      varchar(25) NOT null,
 Prod_ID       serial NOT NULL,
 Cust_ID       serial NOT NULL,
 geo_ID        serial NOT NULL,
 ship_id       serial NOT NULL,
 order_date_id int NOT NULL,
 ship_date_id  int NOT NULL,

 CONSTRAINT PK_1 PRIMARY KEY ( Sales_Fact_ID ),
 CONSTRAINT FK_1 FOREIGN KEY ( geo_ID ) REFERENCES geo ( geo_ID ),
 CONSTRAINT FK_2 FOREIGN KEY ( Cust_ID ) REFERENCES client ( Cust_ID ),
 CONSTRAINT FK_4 FOREIGN KEY ( Prod_ID ) REFERENCES product ( Prod_ID ),
 CONSTRAINT FK_5 FOREIGN KEY ( ship_id ) REFERENCES shipping_mode ( ship_id ),
 CONSTRAINT FK_5_1 FOREIGN KEY ( order_date_id ) REFERENCES calendar ( Date_id ),
 CONSTRAINT FK_6 FOREIGN KEY ( ship_date_id ) REFERENCES calendar ( Date_id )
);

insert into dw.sales_facts (cust_id, order_date_id, ship_date_id, prod_id, ship_id, geo_id, order_id, sales, profit, quantity, discount)
select
    cd.cust_id,
    to_char(order_date, 'YYYYMMDD')::int as order_date_id,
    to_char(ship_date, 'YYYYMMDD')::int as ship_date_id,
    p.prod_id,
    s.ship_id,
    g.geo_id,
    o.order_id,
    sales,
    profit,
    quantity,
    discount
from stg.orders o
inner join dw.shipping_mode s on o.ship_mode = s.ship_mode
inner join dw.geo g on o.postal_code = g.postal_code and g.country = o.country and g.city = o.city and o.state = g.state
inner join dw.product p on o.product_name = p.product_name and o.segment = p.segment and o.subcategory = p.sub_category and o.category = p.category and o.product_id = p.product_id
inner join dw.client cd on cd.customer_id = o.customer_id and cd.customer_name = o.customer_name;


-- проверочка 
--do you get 9994rows?
select * from dw.sales_facts sf
inner join dw.shipping_mode s on sf.ship_id=s.ship_id
inner join dw.geo g on sf.geo_id=g.geo_id
inner join dw.product p on sf.prod_id=p.prod_id
inner join dw.client cd on sf.cust_id=cd.cust_id;
























